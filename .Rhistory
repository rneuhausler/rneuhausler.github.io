group_by(randomNodes) %>%
summarize(medianNPatches=median(patches))
random %>%
mutate('patches' = randomCP$patches)
random
randomCP
ggplot() +
geom_count(aes(randomCP$X0, randomCP$X1, color = randomCP$X),alpha=.5) +
geom_line(aes(random$randomNodes, random$medianNPatches), alpha=.5, color="red")
randomCP %>%
select("randomNodes" = X0, "patches" = X1) %>%
ggplot() +
geom_count(aes(randomNodes, patches),alpha=.5) +
geom_line(aes(random$randomNodes, random$medianNPatches), alpha=.5, color="red")
ggplot() +
geom_count(aes(randomCP$X0, randomCP$X1, color = combined$X),alpha=.5) +
geom_line(aes(random$randomNodes, random$medianNPatches), alpha=.5, color="red")
ggplot() +
geom_count(aes(randomCP$X0, randomCP$X1, color = radomCP$X),alpha=.5) +
geom_line(aes(random$randomNodes, random$medianNPatches), alpha=.5, color="red")
ggplot() +
geom_count(aes(randomCP$X0, randomCP$X1, color = randomCP$X),alpha=.5) +
geom_line(aes(random$randomNodes, random$medianNPatches), alpha=.5, color="red")
```{r, fig.width=5, fig.height = 5}
random <- randomCP %>%
select("randomNodes" = X0, "patches" = X1) %>%
group_by(randomNodes) %>%
summarize(medianNPatches=median(patches))
ggplot() +
geom_count(aes(randomCP$X0, randomCP$X1, color = randomCP$X),alpha=.5) +
geom_line(aes(random$randomNodes, random$medianNPatches), alpha=.5, color="red")
```{r loading libraries}
library(tidyverse)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(reshape2)
load(simulation/run1)
load(/simulation/run1)
load("/simulation/run1")
install.packages('reticulate')
getwd()
load(/Desktop/Fall_2019/coralModelPrivate/scripts/simulations/run1)
load(file='/Desktop/Fall_2019/coralModelPrivate/scripts/simulations/run1')
use_python("/usr/local/bin/python")
library(reticulate)
library(reticulate)
use_python("/usr/local/bin/python")
load(file='/Desktop/Fall_2019/coralModelPrivate/scripts/simulations/run1')
install.packages('reticulate')
#install.packages('reticulate')
library(reticulate)
use_python("/usr/local/bin/python")
use_python("/Users/rosannaneuhausler/anaconda3/lib/python3.7")
#install.packages('reticulate')
library(reticulate)
#install.packages('reticulate')
library(reticulate)
use_python("/Users/rosannaneuhausler/anaconda3/lib/python3.7")
import pandas as pd
#install.packages('reticulate')
library(reticulate)
use_python("/Users/rosannaneuhausler/anaconda3/lib/python3.7")
os <- import("os")
os$listdir(".")
use_python("/Users/rosannaneuhausler/anaconda3/lib/python3.7")
#install.packages('reticulate')
library(reticulate)
conda list
use_python("/Users/rosannaneuhausler/anaconda3/lib/python3.7")
#install.packages('reticulate')
library(reticulate)
use_python("/Users/rosannaneuhausler/anaconda3/lib/python3.7")
?reticulate::py_config()
?py_cofig
??py_cofig
?py_cofig
?py_config
py_config()
use_python("/Users/rosannaneuhausler/anaconda3/lib/python3.7")
reticulate::use_python("/Users/rosannaneuhausler/anaconda3/lib/python3.7")
library(reticulate)
py_config()
reticulate::use_python("/Users/rosannaneuhausler/anaconda3/lib/python3.7", required=T)
reticulate::use_python("/Users/rosannaneuhausler/anaconda3/lib/python3.7", required=T)
packageVersion("reticulate")
reticulate::use_python(Sys.which('python3'), required = TRUE)
reticulate::use_python(Sys.which('python3'), required = TRUE)
install.packages(c("GGally", "glmnet"))
```{r setup, echo = FALSE, message=FALSE, warning=FALSE}
# load in useful packages
library(tidyverse)
library(maps)
library(maps)
library(ggplot2)
library(dplyr)
library(cowplot)
library(knitr)
library(forcats)
library(lubridate)
library(ggplot2)
library(dplyr)
library(cowplot)
library(knitr)
library(forcats)
library(lubridate)
library(stringr)
# load in the loadData() functions
source("R/load.R")
# load in the cleanData() functions
source("R/clean.R")
# load in the loadData() functions
source("R/load.R")
# load in the cleanData() functions
source("R/clean.R")
```{r load-data, echo = FALSE, message = FALSE, warning = FALSE, cache = TRUE}
data <- load_txt("lingData.txt")
data <- load_txt("lingData.txt")
location <- load_txt("lingLocation.txt")
# load in the loadData() functions
source("R/load.R")
# load in the cleanData() functions
source("R/clean.R")
data <- load_txt("lingData.txt")
data <- load_txt("/lingData.txt")
---
title: "EXPLORATION: Lab 1 - Redwood Data, Stat 215A, Fall 2017"
author: "Rosanna Neuhausler"
date: "9/14/2017"
header-includes:
- \usepackage{float}
output:
pdf_document:
number_sections: true
---
###make variable df
```{r setup, echo = FALSE, message=FALSE, warning=FALSE}
# load in useful packages
library(tidyverse)
library(forcats)
library(lubridate)
library(stringr)
library(ggplot2)
library(ggjanus)
library(stringr)
# load in the loadData() functions
source("R/load.R")
```{r load-data, echo = FALSE, message = FALSE, warning = FALSE, cache = TRUE}
# load the dates data
dates_original <- loadDatesData(path = "data/")
# load the dates data
dates_original <- loadDatesData(path = "data/")
# clean the dates data
dates <- cleanDatesData(dates_orig)
# clean the dates data
dates <- cleanDatesData(dates_original)
#prepare for join
colnames(dates)[1] <- "epoch"
dates <- mutate(dates, epoch = as.numeric(epoch))
# load the redwood sensor data
redwood <- loadRedwoodData(path = "data/", source = "all")
# load the redwood sensor data
redwood <- loadRedwoodData(path = "data/", source = "all")
mote <- read.table("data/mote-location-data.txt", header = TRUE)
colnames(mote)[1] <- "nodeid"
# combine data
df_original <- left_join(redwood, mote, by = 'nodeid')
df_original <- left_join(df_original, dates, by = 'epoch')
df_original$minute <- format(strptime(df_original$time,"%H:%M:%S"),'%M') #adding minute column
df_original$hour <- format(strptime(df_original$time,"%H:%M:%S"),'%H') #adding hour column
# clean combined
df_original <- df_original %>%
na.omit() %>%                                #removes na's from the data
filter(voltage > 2.4 & voltage < 3) %>%      #voltage showing node is not working correctly
filter(humidity < 100) %>%                   #RH should not be > 100
filter(hamatop >= hamabot) %>%               #reflected < incident PAR
filter(hamatop < 25000) %>%                 #remove few incient PAR values over 25000
filter(Tree == 'interior')
# renaming columns for plotting, removing result_time since it's the same for all
df <- df_original %>%
transmute(epoch = epoch, tree = Tree, node = nodeid, temperature = humid_temp,
humidity = humidity, humidity_adjusted = humid_adj, height = Height,
depth = depth, parent = parent, incident_PAR = hamatop, reflected_PAR = hamabot,
direction = Direc, distance = Dist, day = day, time = time, date = date,
datetime = datetime,  voltage = voltage, minute = minute, hour = hour)
#Theme setup for plotting
blank_theme <- theme_bw() +
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(size = 10),
axis.title=element_text(size=10))
df %>%
filter(minute == "00" | minute == "15" | minute == "30" | minute == "45") %>%
ggplot() +
geom_point(mapping = aes(x = epoch, y = incident_PAR, color = height, alpha = .5)) +
facet_wrap(~ direction, nrow = 4)
df %>%
filter(minute == "00" | minute == "15" | minute == "30" | minute == "45") %>%
ggplot() +
geom_point(mapping = aes(x = epoch, y = incident_PAR, color = height, alpha = .5)) +
facet_wrap(~ direction, nrow = 4)
library(tidyverse)
library(ggplot2)
C = rep(0, times = (num_steps + 1))
num_steps = 100
C = rep(0, times = (num_steps + 1))
C
for (n in seq(1,3)){return(n)}
for (n in seq(1,3)){return(n)}
library(dplyr)
library(ggplot2)
library(magrittr)
file = 'deep_sea_corals_b559_10cf_111e.csv'
bay_coral = read.csv(file)
coral %>%
filter(as.numeric(latitude) > 37.5) %>%
ggplot() +
geom_bar(aes(ObservationYear, fill = Locality))
coral = read.csv(file)
```{r}
coral %>%
filter(as.numeric(latitude) > 37.5) %>%
ggplot() +
geom_bar(aes(ObservationYear, fill = Locality))
coral %>%
filter(as.numeric(latitude) > 37.00) %>%
ggplot() +
geom_bar(aes(round(as.numeric(latitude))))
coral %>%
filter(Locality == "Drakes Bay, South of") %>%
```{r}
bay_coral %>%
filter(as.numeric(latitude) > 37)
library(tidyverse)
require(here)
install.packages(here)
install.packages('here')
require(here)
# dr_here(show_reason = TRUE)
wd_Rscripts <- getwd()
wd <- gsub("/Rscripts","",wd_Rscripts)
wd_output <- paste(wd,"Datasets/Calibration/Output",sep="/") # where I pasted the the datasets outputed by the model
wd_experimental_design <-  paste(wd,"Datasets/Calibration/Experimental_design",sep="/")
modeldir <- paste(gsub("/Simulations","",wd),"coralreef2",sep="/") # where the model should be installed. In any case, use absolute path to launch simulations from R.
### Install rrepast from Github:
# library(devtools) # to call install_github() --> install the last version of rrepast from GitHub
# install_github("antonio-pgarcia/rrepast")
detach("package:rJava", unload=TRUE)
detach("package:rrepast", unload=TRUE)
options(java.parameters="-server -d64 -Xms=4096m -Xmx10240m")
# install.packages("rrepast")
require(rJava)
require(rrepast)
source(paste(wd_Rscripts,"Calibration_functions.R",sep="/"))
parametersVal <- list()
parameterNames <- c()
i <- 0
Bleaching_diff_response <- c(2,3,4)
parametersVal[[i <- i + 1]] <- Bleaching_diff_response
parameterNames[i] <- "Bleaching_diff_response"
Cyclone_DMT.model <- c(1,2,3)
parametersVal[[i <- i + 1]] <- Cyclone_DMT.model
require(here)
# dr_here(show_reason = TRUE)
wd_Rscripts <- getwd()
wd <- gsub("/Rscripts","",wd_Rscripts)
wd_Datasets <- paste(wd,"Datasets",sep="/")
wd_Datasets_original <- paste(wd,"Datasets_original",sep="/")
require(phytools)
source(paste(wd_Rscripts,"functions.R",sep="/"))
### Import updated and cut supertree for coral from (Huang and Roy 2015) --> names have been updated
supertree <- read.tree(paste(wd_Datasets,"supertree_names_validated_100.tre",sep="/"))
numberTrees <- length(supertree) # 100
numberSpeciesTree <- length(supertree[[1]]$tip.label) # 1500
head(supertree[[1]]$tip.label)
### change tip.labels: "Leptopenus_solidus" --> "Leptopenus solidus"
for(i in 1:numberTrees){
supertree[[i]]$tip.label <- gsub("_"," ", supertree[[i]]$tip.label)
}
### Import the coral trait dataset (only zooxanthellae)
Functional_traits_zooxan <- read.csv(paste(wd_Datasets,"Traits_compilation_zooxanthellate.csv",sep="/"),header=T,stringsAsFactors = F)
length(Functional_traits_zooxan$species) # 828
head(Functional_traits_zooxan)
### check if species in Functional_traits_zooxan not in the tree: --> remove the ones with no numerical trait information
speciesNotInTree <- speciesNotPresentFun(Functional_traits_zooxan$species,supertree[[1]]$tip.label)  # species present in the 1st list but not the second:
length(speciesNotInTree) # 40
Functional_traits_zooxan[Functional_traits_zooxan$species %in% speciesNotInTree,]
### remove the species that have no numerical trait values from Functional_traits_zooxan:
speciesToRemove <- character()
numberSpeciesNotInTree <- length(speciesNotInTree) # 40
numericalTraits <- c("age_at_maturity","aggressiveness","bleaching_response_index","chlorophyll_a_concentration","colony_max_diameter","corallite_area","dark_respiration","egg_diameter","fecundity_polyp","growth_rate",
"lipid_content","reduced_scattering_coefficient","size_at_maturity","skeletal_density","symbiodinium_density","tissue_thickness")
x <- 1
for(i in 1:numberSpeciesNotInTree){
FTDF_cut <- Functional_traits_zooxan[Functional_traits_zooxan$species == speciesNotInTree[i],]
FTDF_cut <- FTDF_cut[,numericalTraits]
if(sum(is.na(FTDF_cut[1,])) == 16){
speciesToRemove[x] <- speciesNotInTree[i]
x <- x + 1
}
}
length(speciesToRemove) # 29
Functional_traits_zooxan[Functional_traits_zooxan$species %in% speciesToRemove,]
# remove from Functional_traits_zooxan and speciesNotInTree
Functional_traits_zooxan_cut <- Functional_traits_zooxan
speciesNotInTree_cut <- speciesNotInTree
numberSpeciesToRemove <- length(speciesToRemove) # 29
for(i in 1:numberSpeciesToRemove){
Functional_traits_zooxan_cut <- Functional_traits_zooxan_cut[Functional_traits_zooxan_cut$species != speciesToRemove[i],]
speciesNotInTree_cut <- speciesNotInTree_cut[speciesNotInTree_cut != speciesToRemove[i]]
}
length(Functional_traits_zooxan_cut$species) # 799 = 828 - 29
length(speciesNotInTree_cut) # 11 = 40 - 29
### check if the genus is already present in the tree:
genus_species_tree <- genus.species.DF.fun(supertree[[1]]$tip.label)
head(genus_species_tree)
require(here)
# dr_here(show_reason = TRUE)
wd_Rscripts <- getwd()
wd <- gsub("/Rscripts","",wd_Rscripts)
wd_Datasets <- paste(wd,"Datasets",sep="/")
require(here)
# dr_here(show_reason = TRUE)
wd_Rscripts <- getwd()
wd <- gsub("/Rscripts","",wd_Rscripts)
wd_Datasets <- paste(wd,"Datasets",sep="/")
wd_Datasets_original <- paste(wd,"Datasets_original",sep="/")
require(phytools)
source(paste(wd_Rscripts,"functions.R",sep="/"))
library(sp)
library(rgdal)
install.packages('rgdal')
library(rgdal)
library(sp)
library(rgdal)
library(dplyr)
library(dplyr)
library(ggplot2)
library(sp)
library(sp)
library(rgdal)
gridded(pts) = TRUE
pts = read.csv("AS2010.csv")
coordinates(pts)=~longitude+latitude
proj4string(pts)=CRS("+init=epsg:4326")
pts = spTransform(pts, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
gridded(pts) = TRUE
r = raster(pts)
library(raster)
install.packages('raster')
install.packages("raster")
install.packages("raster")
install.packages("raster")
library(sp)
library(rgdal)
library(rgdal)
library(raster)
library(rgdal)
library(raster)
library(ggplot)
library(ggplot2)
library(dplyr)
pts = read.csv("AS2010.csv")
pts = read.csv("AS2010.csv")
coordinates(pts)=~longitude+latitude
proj4string(pts)=CRS("+init=epsg:4326")
pts = spTransform(pts, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
CRS()
proj4string(pts)=CRS("+init=epsg:4326")
pts = spTransform(pts, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
spTransform()
?spTransform()
spTransform()?
View(pts)
View(pts)
View(pts)
pts = spTransform(pts, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
setwd("/Users/rosannaneuhausler/Desktop/website/rneuhausler.github.io")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
install.packages(c("ggmap", "leaflet"))
library(shiny); runApp('~/Documents/School/Spring_18/ds421/other/superfund-inundation/scripts/rshinyApp.R')
runApp('~/Documents/School/Spring_18/ds421/other/superfund-inundation/scripts/rshinyApp.R')
runApp('~/Documents/School/Spring_18/ds421/other/superfund-inundation/scripts/rshinyApp.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='rneuhausler',
token='D25C640843E60CC14F7746D8456D8BE5',
secret='<SECRET>')
rsconnect::setAccountInfo(name='rneuhausler',
token='D25C640843E60CC14F7746D8456D8BE5',
secret='VT3wcS7Y3kFbiLnZOhJAk8jxTBv3p+IXtmOD6V5i')
library(rsconnect)
rsconnect::deployApp('/Users/rosannaneuhausler/Documents/Research/Superfund/app/scripts/')
rsconnect::deployApp('/Users/rosannaneuhausler/Documents/Research/Superfund/app/scripts/')
rsconnect::deployApp('/Users/rosannaneuhausler/Documents/Research/Superfund/app/stormsites/')
rsconnect::deployApp('/Users/rosannaneuhausler/Documents/Research/Superfund/app/stormsites/')
rsconnect::deployApp('/Users/rosannaneuhausler/Documents/Research/Superfund/app/stormsites/')
rsconnect::deployApp('/Users/rosannaneuhausler/Documents/Research/Superfund/app/stormsites/')
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
setwd("/Users/rosannaneuhausler/Desktop/website/rneuhausler.github.io")
#render your sweet site.
rmarkdown::render_site()
wd = getwd()
setwd("/Users/rosannaneuhausler/Desktop/website/rneuhausler.github.io")
#render your sweet site.
rmarkdown::render_site()
wd = getwd()
setwd("/Users/rosannaneuhausler/Desktop/website/rneuhausler.github.io")
#render your sweet site.
rmarkdown::render_site()
wd = getwd()
setwd("/Users/rosannaneuhausler/Desktop/website/rneuhausler.github.io")
#render your sweet site.
rmarkdown::render_site()
install.packages("xts", repos="http://cloud.r-project.org")
#render your sweet site.
rmarkdown::render_site()
install.packages(c("htmlwidgets","xts","zoo","rmarkdown","yaml","dygraphs"),lib="/usr/local/lib/R/site-library",dependencies=TRUE)
install.packages(c("htmlwidgets", "xts", "zoo", "rmarkdown", "yaml", "dygraphs"), lib = "/usr/local/lib/R/site-library", dependencies = TRUE)
#render your sweet site.
rmarkdown::render_site()
setwd("/Users/rosannaneuhausler/Desktop/job_apps/rneuhausler.github.io")
#render your sweet site.
rmarkdown::render_site()
getwd
wd = getwd()
setwd("/Users/rosannaneuhausler/Desktop/job_apps/rneuhausler.github.io")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
